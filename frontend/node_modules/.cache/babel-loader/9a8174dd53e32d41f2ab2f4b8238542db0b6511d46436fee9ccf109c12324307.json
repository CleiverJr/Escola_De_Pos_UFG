{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrcle\\\\OneDrive\\\\Desktop\\\\Projetos\\\\Escola de P\\xF3s\\\\chatbot\\\\src\\\\components\\\\ChatbotWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport FloatingButton from './FloatingButton';\nimport './ChatbotWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatbotWindow = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\n  const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n\n    // Adiciona mensagem do usuário\n    setMessages([...messages, {\n      sender: 'user',\n      text: userMessage\n    }]);\n    try {\n      // Simula uma requisição para a API\n      const response = await axios.post('URL_DA_SUA_API',\n      // Substitua pela URL correta\n      {\n        message: userMessage\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer SUA_CHAVE_DE_API'\n        }\n      });\n      const botReply = response.data.reply || 'Resposta padrão do bot';\n\n      // Adiciona animação de digitação\n      simulateTyping(botReply);\n    } catch (error) {\n      console.error('Erro ao chamar a API:', error);\n      simulateTyping('Erro ao obter resposta. Tente novamente.');\n    }\n    setUserMessage('');\n  };\n\n  // Função para simular a digitação do bot\n  const simulateTyping = text => {\n    setIsTyping(true);\n    setTypingMessage(''); // Reinicia o texto digitado\n    let index = -1;\n    const interval = setInterval(() => {\n      setTypingMessage(prev => prev + text[index]); // Adiciona uma letra\n      index++;\n      if (index === text.length) {\n        clearInterval(interval);\n        setIsTyping(false);\n\n        // Quando a digitação termina, adiciona a mensagem final ao histórico\n        setMessages(prev => [...prev, {\n          sender: 'bot',\n          text: text\n        }]);\n      }\n    }, 10); // Velocidade da digitação (50ms por letra)\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FloatingButton, {\n      onClick: toggleChatbot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-container ${isOpen ? 'visible' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: message.sender === 'user' ? 'right' : 'left',\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.sender === 'user' ? 'Você' : 'Bot', \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), ' ', message.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'left',\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bot:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this), \" \", typingMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chatbot-input\",\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          placeholder: \"Digite sua mensagem...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-button\",\n          onClick: sendMessage,\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatbotWindow, \"oE/qpvuMrqtJ5flLpZZMAMUAL+Q=\");\n_c = ChatbotWindow;\nexport default ChatbotWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatbotWindow\");","map":{"version":3,"names":["React","useState","useEffect","axios","FloatingButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatbotWindow","_s","isOpen","setIsOpen","messages","setMessages","userMessage","setUserMessage","typingMessage","setTypingMessage","isTyping","setIsTyping","toggleChatbot","sendMessage","trim","sender","text","response","post","message","headers","Authorization","botReply","data","reply","simulateTyping","error","console","index","interval","setInterval","prev","length","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","style","textAlign","marginBottom","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/jrcle/OneDrive/Desktop/Projetos/Escola de Pós/chatbot/src/components/ChatbotWindow.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport FloatingButton from './FloatingButton';\r\nimport './ChatbotWindow.css';\r\n\r\nconst ChatbotWindow = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [userMessage, setUserMessage] = useState('');\r\n    const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\r\n    const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        if (!userMessage.trim()) return;\r\n\r\n        // Adiciona mensagem do usuário\r\n        setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n\r\n        try {\r\n            // Simula uma requisição para a API\r\n            const response = await axios.post(\r\n                'URL_DA_SUA_API', // Substitua pela URL correta\r\n                { message: userMessage },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer SUA_CHAVE_DE_API',\r\n                    },\r\n                }\r\n            );\r\n\r\n            const botReply = response.data.reply || 'Resposta padrão do bot';\r\n\r\n            // Adiciona animação de digitação\r\n            simulateTyping(botReply);\r\n        } catch (error) {\r\n            console.error('Erro ao chamar a API:', error);\r\n\r\n            simulateTyping('Erro ao obter resposta. Tente novamente.');\r\n        }\r\n\r\n        setUserMessage('');\r\n    };\r\n\r\n    // Função para simular a digitação do bot\r\n    const simulateTyping = (text) => {\r\n        setIsTyping(true);\r\n        setTypingMessage(''); // Reinicia o texto digitado\r\n        let index = -1;\r\n\r\n        const interval = setInterval(() => {\r\n            setTypingMessage((prev) => prev + text[index]); // Adiciona uma letra\r\n            index++;\r\n\r\n            if (index === text.length) {\r\n                clearInterval(interval);\r\n                setIsTyping(false);\r\n\r\n                // Quando a digitação termina, adiciona a mensagem final ao histórico\r\n                setMessages((prev) => [\r\n                    ...prev,\r\n                    { sender: 'bot', text: text },\r\n                ]);\r\n            }\r\n        }, 10); // Velocidade da digitação (50ms por letra)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FloatingButton onClick={toggleChatbot} />\r\n\r\n            <div className={`chatbot-container ${isOpen ? 'visible' : ''}`}>\r\n                <div className=\"chatbot-header\">Chatbot</div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{\r\n                                textAlign: message.sender === 'user' ? 'right' : 'left',\r\n                                marginBottom: '10px',\r\n                            }}\r\n                        >\r\n                            <strong>{message.sender === 'user' ? 'Você' : 'Bot'}:</strong>{' '}\r\n                            {message.text}\r\n                        </div>\r\n                    ))}\r\n                    {/* Exibe mensagem sendo \"digitada\" */}\r\n                    {isTyping && (\r\n                        <div style={{ textAlign: 'left', marginBottom: '10px' }}>\r\n                            <strong>Bot:</strong> {typingMessage}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"chatbot-input-container\">\r\n                    <input\r\n                        className=\"chatbot-input\"\r\n                        type=\"text\"\r\n                        value={userMessage}\r\n                        onChange={(e) => setUserMessage(e.target.value)}\r\n                        placeholder=\"Digite sua mensagem...\"\r\n                    />\r\n                    <button className=\"chatbot-button\" onClick={sendMessage}>\r\n                        Enviar\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatbotWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}