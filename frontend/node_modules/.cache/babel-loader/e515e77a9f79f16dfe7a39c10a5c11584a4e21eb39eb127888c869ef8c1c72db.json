{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrcle\\\\OneDrive\\\\Desktop\\\\Projetos\\\\Escola de P\\xF3s\\\\chatbot\\\\src\\\\components\\\\ChatbotWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport FloatingButton from './FloatingButton';\nimport './ChatbotWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatbotWindow = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\n  const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    const currentTime = new Date().toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    // Adiciona mensagem do usuário\n    setMessages([...messages, {\n      sender: 'user',\n      text: userMessage,\n      time: currentTime\n    }]);\n    try {\n      // Simula uma requisição para a API\n      const response = await axios.post('URL_DA_SUA_API',\n      // Substitua pela URL correta\n      {\n        message: userMessage\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer SUA_CHAVE_DE_API'\n        }\n      });\n      const botReply = response.data.reply || 'Resposta padrão do bot';\n\n      // Adiciona animação de digitação\n      simulateTyping(botReply);\n    } catch (error) {\n      console.error('Erro ao chamar a API:', error);\n      simulateTyping('Erro ao obter resposta. Tente novamente.');\n    }\n    setUserMessage('');\n  };\n\n  // Função para simular a digitação do bot\n  const simulateTyping = text => {\n    setIsTyping(true);\n    setTypingMessage(''); // Reinicia o texto digitado\n    const words = text.split(' '); // Divide o texto em palavras\n    let index = 0;\n    const interval = setInterval(() => {\n      setTypingMessage(prev => prev + (prev ? ' ' : '') + words[index]); // Adiciona uma palavra com espaço\n      index++;\n      if (index === words.length) {\n        clearInterval(interval);\n        setIsTyping(false);\n\n        // Quando a digitação termina, adiciona a mensagem final ao histórico\n        setMessages(prev => [...prev, {\n          sender: 'bot',\n          text: text\n        }]);\n      }\n    }, 300); // Velocidade da digitação (300ms por palavra)\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FloatingButton, {\n      onClick: toggleChatbot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-container ${isOpen ? 'visible' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: message.sender === 'user' ? 'right' : 'left',\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [message.sender === 'user' ? 'Você' : 'Bot', \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this), \" \", message.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '0.8rem',\n              color: 'gray',\n              marginTop: '5px',\n              textAlign: message.sender === 'user' ? 'right' : 'left'\n            },\n            children: message.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chatbot-input\",\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          placeholder: \"Digite sua mensagem...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-button\",\n          onClick: sendMessage,\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatbotWindow, \"oE/qpvuMrqtJ5flLpZZMAMUAL+Q=\");\n_c = ChatbotWindow;\nexport default ChatbotWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatbotWindow\");","map":{"version":3,"names":["React","useState","useEffect","axios","FloatingButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatbotWindow","_s","isOpen","setIsOpen","messages","setMessages","userMessage","setUserMessage","typingMessage","setTypingMessage","isTyping","setIsTyping","toggleChatbot","sendMessage","trim","currentTime","Date","toLocaleTimeString","hour","minute","sender","text","time","response","post","message","headers","Authorization","botReply","data","reply","simulateTyping","error","console","words","split","index","interval","setInterval","prev","length","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","style","textAlign","marginBottom","fontSize","color","marginTop","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/jrcle/OneDrive/Desktop/Projetos/Escola de Pós/chatbot/src/components/ChatbotWindow.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport FloatingButton from './FloatingButton';\r\nimport './ChatbotWindow.css';\r\n\r\nconst ChatbotWindow = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [userMessage, setUserMessage] = useState('');\r\n    const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\r\n    const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        if (!userMessage.trim()) return;\r\n\r\n        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n        // Adiciona mensagem do usuário\r\n        setMessages([...messages, { sender: 'user', text: userMessage, time: currentTime }]);\r\n\r\n        try {\r\n            // Simula uma requisição para a API\r\n            const response = await axios.post(\r\n                'URL_DA_SUA_API', // Substitua pela URL correta\r\n                { message: userMessage },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: 'Bearer SUA_CHAVE_DE_API',\r\n                    },\r\n                }\r\n            );\r\n\r\n            const botReply = response.data.reply || 'Resposta padrão do bot';\r\n\r\n            // Adiciona animação de digitação\r\n            simulateTyping(botReply);\r\n        } catch (error) {\r\n            console.error('Erro ao chamar a API:', error);\r\n\r\n            simulateTyping('Erro ao obter resposta. Tente novamente.');\r\n        }\r\n\r\n        setUserMessage('');\r\n    };\r\n\r\n    // Função para simular a digitação do bot\r\n    const simulateTyping = (text) => {\r\n        setIsTyping(true);\r\n        setTypingMessage(''); // Reinicia o texto digitado\r\n        const words = text.split(' '); // Divide o texto em palavras\r\n        let index = 0;\r\n\r\n        const interval = setInterval(() => {\r\n            setTypingMessage((prev) => (prev + (prev ? ' ' : '') + words[index])); // Adiciona uma palavra com espaço\r\n            index++;\r\n\r\n            if (index === words.length) {\r\n                clearInterval(interval);\r\n                setIsTyping(false);\r\n\r\n                // Quando a digitação termina, adiciona a mensagem final ao histórico\r\n                setMessages((prev) => [\r\n                    ...prev,\r\n                    { sender: 'bot', text: text },\r\n                ]);\r\n            }\r\n        }, 300); // Velocidade da digitação (300ms por palavra)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <FloatingButton onClick={toggleChatbot} />\r\n\r\n            <div className={`chatbot-container ${isOpen ? 'visible' : ''}`}>\r\n                <div className=\"chatbot-header\">Chatbot</div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{\r\n                                textAlign: message.sender === 'user' ? 'right' : 'left',\r\n                                marginBottom: '10px',\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                <strong>{message.sender === 'user' ? 'Você' : 'Bot'}:</strong> {message.text}\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    fontSize: '0.8rem',\r\n                                    color: 'gray',\r\n                                    marginTop: '5px',\r\n                                    textAlign: message.sender === 'user' ? 'right' : 'left',\r\n                                }}\r\n                            >\r\n                                {message.time}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"chatbot-input-container\">\r\n                    <input\r\n                        className=\"chatbot-input\"\r\n                        type=\"text\"\r\n                        value={userMessage}\r\n                        onChange={(e) => setUserMessage(e.target.value)}\r\n                        placeholder=\"Digite sua mensagem...\"\r\n                    />\r\n                    <button className=\"chatbot-button\" onClick={sendMessage}>\r\n                        Enviar\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatbotWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}