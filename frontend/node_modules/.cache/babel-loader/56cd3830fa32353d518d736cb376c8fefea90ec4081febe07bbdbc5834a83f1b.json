{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jrcle\\\\OneDrive\\\\Desktop\\\\Projetos\\\\Escola de P\\xF3s\\\\chatbot\\\\src\\\\components\\\\ChatbotWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport FloatingButton from './FloatingButton';\nimport './ChatbotWindow.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatbotWindow = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\n  const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\n\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    const currentTime = new Date().toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    // Adiciona a mensagem do usuário com o horário\n    setMessages([...messages, {\n      sender: 'user',\n      text: userMessage,\n      time: currentTime\n    }]);\n    try {\n      var _response$data$choice;\n      const response = await axios.post('https://api.openai.com/v1/engines/text-davinci-003/completions', {\n        prompt: userMessage,\n        max_tokens: 50\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n        }\n      });\n      const botReply = ((_response$data$choice = response.data.choices[0]) === null || _response$data$choice === void 0 ? void 0 : _response$data$choice.text.trim()) || 'Resposta não disponível';\n      const botTime = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n\n      // Adiciona a resposta do bot com o horário\n      simulateTyping(botReply, botTime);\n    } catch (error) {\n      console.error('Erro ao chamar a API:', error);\n      const botTime = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: 'Erro ao obter resposta. Tente novamente.',\n        time: botTime\n      }]);\n    }\n    setUserMessage('');\n  };\n\n  // Simula a digitação do bot com horário\n  const simulateTyping = (text, time) => {\n    setIsTyping(true);\n    setTypingMessage('');\n    const words = text.split(' ');\n    let index = 0;\n    const interval = setInterval(() => {\n      setTypingMessage(prev => prev + (prev ? ' ' : '') + words[index]);\n      index++;\n      if (index === words.length) {\n        clearInterval(interval);\n        setIsTyping(false);\n        setMessages(prev => [...prev, {\n          sender: 'bot',\n          text: text,\n          time: time\n        }]);\n      }\n    }, 300);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FloatingButton, {\n      onClick: toggleChatbot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-container ${isOpen ? 'visible' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: message.sender === 'user' ? 'right' : 'left',\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [message.sender === 'user' ? 'Você' : 'Bot', \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), \" \", message.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '0.8rem',\n              color: 'gray',\n              marginTop: '5px',\n              textAlign: message.sender === 'user' ? 'right' : 'left'\n            },\n            children: message.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chatbot-input\",\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          placeholder: \"Digite sua mensagem...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatbot-button\",\n          onClick: sendMessage,\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatbotWindow, \"oE/qpvuMrqtJ5flLpZZMAMUAL+Q=\");\n_c = ChatbotWindow;\nexport default ChatbotWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatbotWindow\");","map":{"version":3,"names":["React","useState","useEffect","axios","FloatingButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatbotWindow","_s","isOpen","setIsOpen","messages","setMessages","userMessage","setUserMessage","typingMessage","setTypingMessage","isTyping","setIsTyping","toggleChatbot","sendMessage","trim","currentTime","Date","toLocaleTimeString","hour","minute","sender","text","time","_response$data$choice","response","post","prompt","max_tokens","headers","Authorization","process","env","REACT_APP_API_KEY","botReply","data","choices","botTime","simulateTyping","error","console","prev","words","split","index","interval","setInterval","length","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","message","style","textAlign","marginBottom","fontSize","color","marginTop","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/jrcle/OneDrive/Desktop/Projetos/Escola de Pós/chatbot/src/components/ChatbotWindow.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport FloatingButton from './FloatingButton';\r\nimport './ChatbotWindow.css';\r\n\r\nconst ChatbotWindow = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [userMessage, setUserMessage] = useState('');\r\n    const [typingMessage, setTypingMessage] = useState(''); // Estado para mensagem digitada\r\n    const [isTyping, setIsTyping] = useState(false); // Controla se o bot está \"digitando\"\r\n\r\n    const toggleChatbot = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        if (!userMessage.trim()) return;\r\n\r\n        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n        // Adiciona a mensagem do usuário com o horário\r\n        setMessages([...messages, { sender: 'user', text: userMessage, time: currentTime }]);\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                'https://api.openai.com/v1/engines/text-davinci-003/completions',\r\n                {\r\n                    prompt: userMessage,\r\n                    max_tokens: 50,\r\n                },\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            const botReply = response.data.choices[0]?.text.trim() || 'Resposta não disponível';\r\n            const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n            // Adiciona a resposta do bot com o horário\r\n            simulateTyping(botReply, botTime);\r\n        } catch (error) {\r\n            console.error('Erro ao chamar a API:', error);\r\n            const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n\r\n            setMessages((prev) => [\r\n                ...prev,\r\n                { sender: 'bot', text: 'Erro ao obter resposta. Tente novamente.', time: botTime },\r\n            ]);\r\n        }\r\n\r\n        setUserMessage('');\r\n    };\r\n\r\n    // Simula a digitação do bot com horário\r\n    const simulateTyping = (text, time) => {\r\n        setIsTyping(true);\r\n        setTypingMessage('');\r\n        const words = text.split(' ');\r\n        let index = 0;\r\n\r\n        const interval = setInterval(() => {\r\n            setTypingMessage((prev) => (prev + (prev ? ' ' : '') + words[index]));\r\n            index++;\r\n\r\n            if (index === words.length) {\r\n                clearInterval(interval);\r\n                setIsTyping(false);\r\n\r\n                setMessages((prev) => [\r\n                    ...prev,\r\n                    { sender: 'bot', text: text, time: time },\r\n                ]);\r\n            }\r\n        }, 300);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <FloatingButton onClick={toggleChatbot} />\r\n\r\n            <div className={`chatbot-container ${isOpen ? 'visible' : ''}`}>\r\n                <div className=\"chatbot-header\">Chatbot</div>\r\n                <div className=\"chatbot-messages\">\r\n                    {messages.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            style={{\r\n                                textAlign: message.sender === 'user' ? 'right' : 'left',\r\n                                marginBottom: '10px',\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                <strong>{message.sender === 'user' ? 'Você' : 'Bot'}:</strong> {message.text}\r\n                            </div>\r\n                            <div\r\n                                style={{\r\n                                    fontSize: '0.8rem',\r\n                                    color: 'gray',\r\n                                    marginTop: '5px',\r\n                                    textAlign: message.sender === 'user' ? 'right' : 'left',\r\n                                }}\r\n                            >\r\n                                {message.time}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"chatbot-input-container\">\r\n                    <input\r\n                        className=\"chatbot-input\"\r\n                        type=\"text\"\r\n                        value={userMessage}\r\n                        onChange={(e) => setUserMessage(e.target.value)}\r\n                        placeholder=\"Digite sua mensagem...\"\r\n                    />\r\n                    <button className=\"chatbot-button\" onClick={sendMessage}>\r\n                        Enviar\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatbotWindow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjD,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IACxBT,SAAS,CAAC,CAACD,MAAM,CAAC;EACtB,CAAC;EAED,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACP,WAAW,CAACQ,IAAI,CAAC,CAAC,EAAE;IAEzB,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC,CAAC;;IAE7F;IACAd,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEgB,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEf,WAAW;MAAEgB,IAAI,EAAEP;IAAY,CAAC,CAAC,CAAC;IAEpF,IAAI;MAAA,IAAAQ,qBAAA;MACA,MAAMC,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,IAAI,CAC7B,gEAAgE,EAChE;QACIC,MAAM,EAAEpB,WAAW;QACnBqB,UAAU,EAAE;MAChB,CAAC,EACD;QACIC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,iBAAiB;QAC1D;MACJ,CACJ,CAAC;MAED,MAAMC,QAAQ,GAAG,EAAAV,qBAAA,GAAAC,QAAQ,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,cAAAZ,qBAAA,uBAAxBA,qBAAA,CAA0BF,IAAI,CAACP,IAAI,CAAC,CAAC,KAAI,yBAAyB;MACnF,MAAMsB,OAAO,GAAG,IAAIpB,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,EAAE,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;;MAEzF;MACAkB,cAAc,CAACJ,QAAQ,EAAEG,OAAO,CAAC;IACrC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMF,OAAO,GAAG,IAAIpB,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,EAAE,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;MAEzFd,WAAW,CAAEmC,IAAI,IAAK,CAClB,GAAGA,IAAI,EACP;QAAEpB,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE,0CAA0C;QAAEC,IAAI,EAAEc;MAAQ,CAAC,CACrF,CAAC;IACN;IAEA7B,cAAc,CAAC,EAAE,CAAC;EACtB,CAAC;;EAED;EACA,MAAM8B,cAAc,GAAGA,CAAChB,IAAI,EAAEC,IAAI,KAAK;IACnCX,WAAW,CAAC,IAAI,CAAC;IACjBF,gBAAgB,CAAC,EAAE,CAAC;IACpB,MAAMgC,KAAK,GAAGpB,IAAI,CAACqB,KAAK,CAAC,GAAG,CAAC;IAC7B,IAAIC,KAAK,GAAG,CAAC;IAEb,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BpC,gBAAgB,CAAE+B,IAAI,IAAMA,IAAI,IAAIA,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,GAAGC,KAAK,CAACE,KAAK,CAAE,CAAC;MACrEA,KAAK,EAAE;MAEP,IAAIA,KAAK,KAAKF,KAAK,CAACK,MAAM,EAAE;QACxBC,aAAa,CAACH,QAAQ,CAAC;QACvBjC,WAAW,CAAC,KAAK,CAAC;QAElBN,WAAW,CAAEmC,IAAI,IAAK,CAClB,GAAGA,IAAI,EACP;UAAEpB,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEA,IAAI;UAAEC,IAAI,EAAEA;QAAK,CAAC,CAC5C,CAAC;MACN;IACJ,CAAC,EAAE,GAAG,CAAC;EACX,CAAC;EAGD,oBACIzB,OAAA,CAAAE,SAAA;IAAAiD,QAAA,gBACInD,OAAA,CAACF,cAAc;MAACsD,OAAO,EAAErC;IAAc;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1CxD,OAAA;MAAKyD,SAAS,EAAE,qBAAqBpD,MAAM,GAAG,SAAS,GAAG,EAAE,EAAG;MAAA8C,QAAA,gBAC3DnD,OAAA;QAAKyD,SAAS,EAAC,gBAAgB;QAAAN,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7CxD,OAAA;QAAKyD,SAAS,EAAC,kBAAkB;QAAAN,QAAA,EAC5B5C,QAAQ,CAACmD,GAAG,CAAC,CAACC,OAAO,EAAEb,KAAK,kBACzB9C,OAAA;UAEI4D,KAAK,EAAE;YACHC,SAAS,EAAEF,OAAO,CAACpC,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;YACvDuC,YAAY,EAAE;UAClB,CAAE;UAAAX,QAAA,gBAEFnD,OAAA;YAAAmD,QAAA,gBACInD,OAAA;cAAAmD,QAAA,GAASQ,OAAO,CAACpC,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,KAAK,EAAC,GAAC;YAAA;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACG,OAAO,CAACnC,IAAI;UAAA;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3E,CAAC,eACNxD,OAAA;YACI4D,KAAK,EAAE;cACHG,QAAQ,EAAE,QAAQ;cAClBC,KAAK,EAAE,MAAM;cACbC,SAAS,EAAE,KAAK;cAChBJ,SAAS,EAAEF,OAAO,CAACpC,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG;YACrD,CAAE;YAAA4B,QAAA,EAEDQ,OAAO,CAAClC;UAAI;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA,GAlBDV,KAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAmBT,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENxD,OAAA;QAAKyD,SAAS,EAAC,yBAAyB;QAAAN,QAAA,gBACpCnD,OAAA;UACIyD,SAAS,EAAC,eAAe;UACzBS,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE1D,WAAY;UACnB2D,QAAQ,EAAGC,CAAC,IAAK3D,cAAc,CAAC2D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAChDI,WAAW,EAAC;QAAwB;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACFxD,OAAA;UAAQyD,SAAS,EAAC,gBAAgB;UAACL,OAAO,EAAEpC,WAAY;UAAAmC,QAAA,EAAC;QAEzD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAACpD,EAAA,CA3HID,aAAa;AAAAqE,EAAA,GAAbrE,aAAa;AA6HnB,eAAeA,aAAa;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}